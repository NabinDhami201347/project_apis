generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Student {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  crn      String @unique
  salt     String
  password String
  role     Role   @default(STUDENT)

  profile StudentProfile?

  attendance Attendance?
  borrowings Borrowing[]

  semester   Semester? @relation("SemesterStudents", fields: [semesterId], references: [id])
  semesterId Int?

  @@index([semesterId])
}

model StudentProfile {
  id            Int       @id @default(autoincrement())
  photo         String?
  address       String?
  phone_number  String
  date_of_birth DateTime?
  joinedDate    DateTime?

  student   Student @relation(fields: [studentId], references: [id])
  studentId Int     @unique

  @@index([studentId])
}

model Teacher {
  id            Int      @id @default(autoincrement())
  name          String
  date_of_birth DateTime
  email         String
  address       String
  phone_number  String
  role          Role     @default(TEACHER)

  profile TeacherProfile?

  subjects Subject[] @relation("TeacherSubject")

  @@index([name])
}

model TeacherProfile {
  id            Int       @id @default(autoincrement())
  photo         String?
  address       String?
  phone_number  String
  date_of_birth DateTime?
  joinedDate    DateTime?

  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId Int     @unique

  @@index([teacherId])
}

model Department {
  id    Int    @id @default(autoincrement())
  title String

  semesters Semester[]
}

model Semester {
  id        Int    @id @default(autoincrement())
  title     String
  total_fee Int

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId Int?

  subjects Subject[]
  students Student[] @relation("SemesterStudents")

  @@index([departmentId])
}

model Subject {
  id           Int    @id @default(autoincrement())
  title        String
  credit_hours Int
  sub_code     String

  semester   Semester? @relation(fields: [semesterId], references: [id])
  semesterId Int?
  books      Book[]
  teachers   Teacher[] @relation("TeacherSubject")

  @@index([semesterId])
}

model Book {
  id          Int     @id @default(autoincrement())
  title       String
  cover_image String?
  quantity    Int?    @default(1)

  library   Library? @relation(fields: [libraryId], references: [id])
  libraryId Int?

  subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId Int?

  tags       Tag[]       @relation("BookTags")
  borrowings Borrowing[]

  @@index([libraryId])
  @@index([subjectId])
}

model Borrowing {
  id         Int       @id @default(autoincrement())
  borrowDate DateTime  @default(now())
  returnDate DateTime?

  book   Book @relation(fields: [bookId], references: [id])
  bookId Int

  student   Student @relation(fields: [studentId], references: [id])
  studentId Int

  @@index([bookId])
  @@index([studentId])
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  books Book[] @relation("BookTags")
}

model Library {
  id    Int    @id @default(autoincrement())
  books Book[]
}

model Attendance {
  id          Int @id @default(autoincrement())
  presentDays Int
  absentDays  Int

  student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?     @unique

  @@index([studentId])
}

model Notice {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String
  tag         String
  image       String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}
